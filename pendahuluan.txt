REST: 
- REpresentational State Transfer
- standar komunikasi web

restful:
- get, post, put, delete
- benefit:
  - stateless: tidak memiliki state internal didalam servernya, hanya meminta request yang diminta
  - cacheable: lebih untuk endpoint get, bisa di simpan didalam server, jadi bisa dipanggil lagi
  - flexibility: tidak terikat pada satu response, bisa txt, json, xml, html.


projek:
- framework echo
- gorm: orm
- database: psql. run with docker
- membuat api service untuk restoran, yang bisa melihat menu, order, user login, user signup

clean architecture:
- membagi code menjadi beberapa layer (ex: entities, use-case, controller, delivery layer)
- membagi responsbililty masing-masing layer

gorm:
- untuk primary key, saat struct perlu di init propert `gorm:""primaryKey`
- untuk foriegh key, tinggal samain aja key nya
- Preload, buat get field jika berelasi isi field nya
- reference id untuk unique key agar tidak bisa dihit berkali2 jika sama
- json di model, untuk change key saat request data

middleware:
- cors origin
- hash password with argon2
- argon saat menyimpan database dengan format
- fmt.Sprintf mengisi data dengan format pada param
- cipher untuk encrypt decrypt, untuk mastikan walaupun sudah di hash masih ada 1 key lagi untuk encrypt (double encrypt) 
- noncesize berapa banyak byte yang di genarate untuk seal

go.sum:
- version manager, maybe seperti package-lock

logrus:
- for logger

opentelemetry:
- service lebih observe able
- metric, tracing
- visualisasi tracing dengan jaeger

run jaeger:
docker run -d --name jaeger \
-e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \
-p 5775:5775/udp \
-p 6831:6831/udp \
-p 6832:6832/udp \
-p 5778:5778 \
-p 16686:16686 \
-p 14268:14268 \
-p 9411:9411 \
jaegertracing/all-in-one:1.6

hadle panic:
- dengan recover, melalu defer func

unit test:
- mock repository for testing (go mock) `go install github.com/golang/mock/mockgen@v1.6.0` `github.com/golang/mock/gomock`
- cara manual mocks:
  mockgen -package=mocks -mock_names=Usacase=MockRestoUsecase -destination=./src/mocks/restoUseCaseMock.go -source=./src/
  use-case/resto/useCase.go
- cara generate mocks with inline code comment:
//go:generate mockgen -package=mocks -mock_names=Repository=MockMenuRepository -destination=../../mocks/menuRepositoryMock.go -source=repository.go
on terminal `go generate ./...` to all go generate in inline code comment
- untuk membuat unit test, masuk ke function usecae nya, click kanan -> go generate unit test for function
- file yang memiliki _test.go dan func Test_ adalah file dan func unit test

- with database mock:
go get github.com/DATA-DOG/go-sqlmock

-run test:
go test ./...

BDD (Behaviour Driven Development):
- sebuah framework memfokuskan testing pada sebuah prilaku / Behaviour yang dijelaskan dalam bahasa manusia
- BDD memperdekat antara tim engineer, tim bisnis dan pm
- install ginkgo
go get github.com/onsi/ginkgo/v2/ginkgo
go install github.com/onsi/ginkgo/v2/ginkgo
go get github.com/onsi/gomega/... => isi untuk support ginkgo

run ginkgo:
- cd filepath
- ginkgo bootstrap
- create spec for test suite case. (ginkgo generate ginkgo_resto)

beberapa cara melakukan describe di ginkgo:
- describe
- when
- it

TDD vs BDD:
- tdd fokus ke fungsionalitas komponen
- bdd sinergi keseluruhan fungsi dari komponen yang ada


goroutine (share resource / sebuah manager untuk threading):
- masing2 goroutine dapat menjalankan masing2 fungsinya secara independen secara async
- menjalankan lebih dari 1 fungsi secara bersamaan
- tidak sama dengan threading
- lebih ringan dibanding dengan multi threading pada umumnya
- sudah di abstaksikan oleh golang
- better menggunakan wait group dibanding time.Sleep

mengakses resource secara bersamaan dengan aman:
- mutex:
 - goroutine akan menunggu sampai resource bisa dipakai, 
    lalu akan mengkunci dan melepas setelah selesai agar bisa digunakan varibale lain

channel:
- adalah cara goroutine yang berbeda2 untuk berkomunikasi satu dan lainnya
- channel dapat digunakan untuk menunggu sesuatu sampai selesai

generics:
- dapat membuat fungsi yang dapat berinteraksi lebih dari 1 tipe
- dapat menggabungkan beberapa fungsi menjadi satu fungsi saja
- dipanggil dengan cara memberikan tipe data sebelum mengisi fungsi